package cn.edu.nenu.clzc.service.examination;

import java.util.ArrayList;
import java.util.List;

import cn.edu.nenu.clzc.commons.entites.examination.ParamQuestion;
import cn.edu.nenu.clzc.commons.exception.ContextException;
import cn.edu.nenu.clzc.commons.extend.ServiceExtend;

/**
 * 
 * @author 我要睡觉了
 * @Title ParamQuestionService.java
 * @Description 小题的service层
 * @time 2016年11月30日 上午10:58:15
 */

public class ParamQuestionService extends ServiceExtend {
	
	/**
	 * 
	 * @Title: addQuestion
	 * @Description: 添加一道小题
	 * @return: String
	 * @throws: ContextException
	 */
	public String addQuestion(ParamQuestion paramQuestion) throws ContextException {
		String id = null;
		try {
			id = paramQuestionDao.addQuestion(paramQuestion);
		} catch (Exception e) {
			logger.error(e);
			throw new ContextException(e);
		}
		return id;
	}
	
	
	/**
	 * 
	 * @Title: deleteQuestion
	 * @Description: 删除一道小题
	 * @return:
	 * @throws:
	 */
	public int deleteQuestion(String id, String questionIsDelete) throws ContextException {
		int i = 0;
		try {
			i = paramQuestionDao.deleteQuestion(id, questionIsDelete);
		} catch (Exception e) {
			logger.error(e);
			throw new ContextException(e);
		}
		return i;
	}
	
	
	/**
	 * 
	 * @Title: selectQuestion
	 * @Description: 根据大题查询出对应的所有可见小题
	 * @return: List<ParamQuestion>
	 * @throws ContextException 
	 */
	public List<ParamQuestion> selectQuestion(String questionsId) throws ContextException {
		List<ParamQuestion> list = new ArrayList<ParamQuestion>();
		try {
			list = paramQuestionDao.selectQuestion(questionsId);
		} catch (Exception e) {
			logger.error(e);
			throw new ContextException(e);
		}
		return list;
	}
	
	
	/**
	 * 
	 * @Title: selectAllQuestion
	 * @Description: 根据大题题号查询出所有的小题
	 * @return: List<ParamQuestion>
	 * @throws ContextException 
	 */
	public List<ParamQuestion> selectAllQuestion(String questionsId) throws ContextException {
		List<ParamQuestion> list = new ArrayList<ParamQuestion>();
		try {
			list = paramQuestionDao.selectAllQuestion(questionsId);
		} catch (Exception e) {
			logger.error(e);
			throw new ContextException(e);
		}
		return list;
	}
	
	
	
	
	
	
	
	
	
}
