package cn.edu.nenu.clzc.dao.examination;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.ColumnListHandler;

import cn.edu.nenu.clzc.commons.core.AbstractDao;
import cn.edu.nenu.clzc.commons.core.expandhandler.ExpandBeanHandler;
import cn.edu.nenu.clzc.commons.core.expandhandler.ExpandBeanListHandler;
import cn.edu.nenu.clzc.commons.entites.examination.ParamEdition;
import cn.edu.nenu.clzc.commons.enumeration.exception.DaoExceptionEnum;
import cn.edu.nenu.clzc.commons.exception.ContextException;
import cn.edu.nenu.clzc.commons.vo.examination.ParamEditionVo;
import cn.edu.nenu.clzc.commons.vo.message.UserMessageVo;

/**
* @param <ParamEditionVo>
 * @Author Kyrie Irving
* @Title: ParamEditionDao 
* @Description: 册操作的dao方法
* @Date 2016年11月18日 下午9:00:11
 */



public class ParamEditionDao extends AbstractDao {
	
	/**
	* @Title: addEdition 
	* @Author Kyrie Irving
	* @Description: 添加一个册(这里用一句话描述这个方法的作用) 
	* @param @param ParamEdition
	* @param @return
	* @param @throws Exception    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	public String addEdition(ParamEdition ParamEdition) throws Exception {
		String id = ParamEdition.getId();  
		String editionName = ParamEdition.getEditionName();
		String editionInfo = ParamEdition.getEditionInfo();
		Date editionTime = ParamEdition.getEditionTime();
		
		Object[] params = {id, editionName, editionInfo, editionTime};
		String sql = "INSERT INTO param_edition (id,edition_name,edition_info, edition_time)VALUES(?, ?, ?, ?)";
		String ae = null;
		try {
			ae = insert(sql, params);
		} catch (ContextException | SQLException e) {
			logger.error(DaoExceptionEnum.addEditionFaild.getInfo(),e);
			throw new Exception(DaoExceptionEnum.addEditionFaild.getInfo());
		}
		return ae;
	}
	
	
	/**
	* @Title: updateEdition 
	* @Author Kyrie Irving
	* @Description: 删除册，根据id修改册的显示状态(这里用一句话描述这个方法的作用) 
	* @param @param id
	* @param @param editionIsDelete
	* @param @return
	* @param @throws Exception    设定文件 
	* @return int    返回类型 
	* @throws
	 */
	public int updateEdition(String id,String editionIsDelete) throws Exception {
		Object[] params = {editionIsDelete,id};
		String sql = "UPDATE param_edition SET message_id_delete =? WHERE  id = ?" ;
		int xe = 0;
		try {
			xe = update(sql, params);
		} catch (ContextException e) {
			logger.error(DaoExceptionEnum.UpdateEditionFaild.getInfo(),e);
			throw new Exception(DaoExceptionEnum.UpdateEditionFaild.getInfo());
		}
		return xe;
	}


	/**
	* @Title: getEditionByEditionName 
	* @Author Kyrie Irving
	* @Description:  根据试卷名查找试卷(这里用一句话描述这个方法的作用) 
	* @param @param editionName
	* @param @return
	* @param @throws Exception    设定文件 
	* @return ParamEditionVo    返回类型 
	* @throws
	 */

	public List<ParamEditionVo> selectByEditionName(String editionName, int currentPage) throws Exception {
		List<ParamEditionVo> list = new ArrayList<ParamEditionVo>();
		String sql = "SELECT param_edition.id,param_edition.edition_name,param_edition.edition_info,param_edition.edition_time FROM param_edition WHERE param_edition.edition_is_delete!=1";

		Object[] params = {"%"+editionName+"%", (currentPage-1)*PAGESIZE, PAGESIZE};
		try {
			list = query(sql, new ExpandBeanListHandler<ParamEditionVo>(ParamEditionVo.class), params);
		} catch (ContextException e) {
			logger.error(DaoExceptionEnum.SelectEditionByEditionName.getInfo(),e);
			throw new Exception(DaoExceptionEnum.SelectEditionByEditionName.getInfo());
		}
		return list;
	}
	

}
